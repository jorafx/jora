{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the API for Jora\n\n[Learn about Jora](http://github.com/jorafx) \n",
    "version" : "1.0.0",
    "title" : "Jora Api",
    "contact" : { },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "api.jora.fx",
  "basePath" : "/v1",
  "schemes" : [ "http" ],
  "paths" : {
    "/project/{projectId}" : {
      "get" : {
        "summary" : "Finds a Jora project by ID",
        "description" : "Returns a project when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        }
      },
      "post" : {
        "summary" : "Updates a jora project with form data",
        "description" : "",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "put" : {
        "summary" : "Updates an existing jora project",
        "description" : "Updates a project with the data sent to it",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a project",
        "description" : "",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "projectid",
          "in" : "header",
          "description" : "",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid pet value"
          }
        }
      }
    },
    "/projects" : {
      "post" : {
        "summary" : "Add a new Jora project",
        "description" : "",
        "consumes" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Project"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/projects/findByTag" : {
      "get" : {
        "summary" : "Finds projects by tags",
        "description" : "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags values that need to be considered for filter",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Project"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      }
    },
    "/task/{taskId}" : {
      "get" : {
        "summary" : "Finds a Jora task by ID",
        "description" : "Returns a project when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Task"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Pet not found"
          }
        }
      },
      "post" : {
        "summary" : "Updates a jora task with form data",
        "description" : "",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Task"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "put" : {
        "summary" : "Updates an existing jora project",
        "description" : "Updates a project with the data sent to it",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Task"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a task",
        "description" : "",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "ID of project that needs to be fetched",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "taskId",
          "in" : "header",
          "description" : "",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid pet value"
          }
        }
      }
    },
    "/tasks" : {
      "post" : {
        "summary" : "Add a new jora task",
        "description" : "Adds a new jora task",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Task"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/tasks/findByProject" : {
      "get" : {
        "summary" : "Finds tasks by tags",
        "description" : "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "parameters" : [ {
          "name" : "projectId",
          "in" : "query",
          "description" : "The project id to get tasks for",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The tasks that belongs to the project",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Task"
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        }
      }
    },
    "/tasks/findByTags" : {
      "get" : {
        "summary" : "Finds tasks by tags",
        "description" : "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "Tags to filter by",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Task"
              }
            }
          },
          "400" : {
            "description" : "Invalid tag value"
          }
        }
      }
    }
  },
  "definitions" : {
    "Project" : {
      "type" : "object",
      "required" : [ "description", "slug" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier for the project"
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the project"
        },
        "slug" : {
          "type" : "string",
          "description" : "An user created id for the project to easier helps us know what to talk about"
        },
        "tasks" : {
          "type" : "array",
          "description" : "The tasks created in the project",
          "items" : {
            "$ref" : "#/definitions/Task"
          }
        },
        "tags" : {
          "type" : "array",
          "description" : "A list of tags used to find and classify the project if there are many",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      },
      "description" : "A project is used to group tasks together"
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier for the task"
        },
        "title" : {
          "type" : "string",
          "description" : "The tag itself"
        }
      }
    },
    "Task" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier for the task"
        },
        "projectid" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the id of the project that the task belongs to"
        },
        "description" : {
          "type" : "string",
          "description" : "Longer description of the tasks"
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "The date the task was created"
        },
        "title" : {
          "type" : "string",
          "description" : "Short title for task goes on card"
        },
        "tags" : {
          "type" : "array",
          "description" : "A list of tags used to find and classify the task",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        }
      }
    }
  }
}